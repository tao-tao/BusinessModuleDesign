package ${packageName};

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import avicit.platform6.api.session.SessionHelper;
import avicit.platform6.api.syslog.dto.LogBaseFactory;
import avicit.platform6.commons.utils.JsonHelper;
import avicit.platform6.core.properties.PlatformConstant.OpResult;
import avicit.platform6.core.rest.msg.LogBase;
import avicit.platform6.core.rest.msg.PageParameter;
import avicit.platform6.core.rest.msg.QueryReqBean;
import avicit.platform6.core.rest.msg.QueryRespBean;
import ${pack}${modeName}.${tableInfo.entityBean.lowerAllCharName}.domain.${tableInfo.entityBean.standName};
import ${pack}${modeName}.${tableInfo.entityBean.lowerAllCharName}.service.${tableInfo.entityBean.standName}Service;

/**
 * Title: 业务对象${tableInfo.entityBean.standName}相关操作入口类
 * Description:该类提供了对${tableInfo.entityBean.standName}添加 修改 删除 查询处理的全部方法，是业务对象与服务交互的入口
 * Copyriht: ${copyright}
 * Company: ${company}
 * @author ${author}
 * @version 1.0 Date: ${date}
 */
@Controller
@Scope("prototype")
@RequestMapping("/${tableInfo.entityBean.lowerFirstCharName}")
public class ${tableInfo.entityBean.standName}Controller {
	
	private static final Logger logger = LoggerFactory.getLogger(${tableInfo.entityBean.standName}Controller.class);
	
	@Autowired
	private SessionHelper sessionHelper;
	
	@Autowired
	private ${tableInfo.entityBean.standName}Service service;
    /**
     * 跳转到管理页面
     * @param request 请求
     * @param reponse 响应
     * @return
     */
    @RequestMapping(value="${tableInfo.entityBean.standName}Info")
	public ModelAndView to${tableInfo.entityBean.standName}Info(HttpServletRequest request,HttpServletResponse reponse){
		ModelAndView mav = new ModelAndView();
		mav.setViewName("${preurl}${tableInfo.entityBean.lowerFirstCharName}Manage");
		request.setAttribute("url", "platform/${tableInfo.entityBean.lowerFirstCharName}/operation/");
		return mav;
	}
	
    @RequestMapping(value="/operation/get${tableInfo.entityBean.standName}sByPage")
	@ResponseBody
	public Map<String,Object> toget${tableInfo.entityBean.standName}ByPage(PageParameter pageParameter,HttpServletRequest request){
		QueryReqBean<${tableInfo.entityBean.standName}DTO> queryReqBean = new QueryReqBean<${tableInfo.entityBean.standName}DTO>();
		queryReqBean.setPageParameter(pageParameter);
		HashMap<String,Object> map = new HashMap<String, Object>();
		String json = ServletRequestUtils.getStringParameter(request, "param", "");
		${tableInfo.entityBean.standName}DTO param = null;
		QueryRespBean<${tableInfo.entityBean.standName}DTO> result =null;
		if(json!= null && !"".equals(json)){
			param = JsonHelper.getInstance().readValue(json, new TypeReference<${tableInfo.entityBean.standName}DTO>(){});
			queryReqBean.setSearchParams(param);
		}
		try {
			 result = service.search${tableInfo.entityBean.standName}ByPage(queryReqBean);
		} catch (Exception ex) {
			logger.debug(ex.getMessage());
			ex.printStackTrace();
			return map;  
		}
		map.put("total",result.getPageParameter().getTotalCount());
		map.put("rows", result.getResult());
		logger.debug("成功获取SysLookupType分页数据");
		return map;
	}	

	
	   //打开编辑或者添加页
    /**
     * 根据id选择跳转到新建页还是编辑页
     * @param type 操作类型新建还是编辑
     * @param id 编辑数据的id
     * @param request 请求
     * @return
     * @throws Exception
     */
  	@RequestMapping(value="/operation/{type}/{id}")
  	public ModelAndView toOpertionPage(@PathVariable String type,
  										@PathVariable String id,
  										HttpServletRequest request)throws Exception{
  		ModelAndView mav= new ModelAndView();
  		if(!"null".equals(id)){//编辑窗口或者详细页窗口
  			//主表数据
  			LogBase logBase = LogBaseFactory.getLogBase(sessionHelper, request);
  			${tableInfo.entityBean.standName}DTO demoBusinessTripDTO = service.query${tableInfo.entityBean.standName}ByPrimaryKey(id,logBase);
  			request.setAttribute("${tableInfo.entityBean.lowerFirstCharName}DTO", ${tableInfo.entityBean.lowerFirstCharName}DTO);
  		}
  		mav.setViewName("${preurl}"+"${tableInfo.entityBean.lowerFirstCharName}"+type);
  		return mav;
  	}
  	
 	/**
  	 * 保存数据
  	 * @param id 主键id
  	 * @param demoBusinessTripDTO 保存的对象
  	 * @return
  	 */
  	@RequestMapping(value="/operation/save",method=RequestMethod.POST)
	public ModelAndView toSave${tableInfo.entityBean.standName}DTO(@RequestBody ${tableInfo.entityBean.standName}DTO ${tableInfo.entityBean.lowerFirstCharName}DTO,HttpServletRequest request){
		ModelAndView mav= new ModelAndView();
		try {
			LogBase logBase = LogBaseFactory.getLogBase(sessionHelper, request);
			if("".equals(${tableInfo.entityBean.lowerFirstCharName}DTO.getId())){//新增
				service.insert${tableInfo.entityBean.standName}(${tableInfo.entityBean.lowerFirstCharName}DTO,logBase);
			}else{//修改
				service.update${tableInfo.entityBean.standName}Sensitive(${tableInfo.entityBean.lowerFirstCharName}DTO,logBase);
			}
			mav.addObject("flag", OpResult.success);
		} catch (Exception ex) {
			logger.debug(ex.getMessage());
			mav.addObject("error", ex.getMessage());
			mav.addObject("flag", OpResult.failure);
			return mav;  
		}
		return mav;
	}
  	/**
  	 * 按照id批量删除数据
  	 * @param ids id数组
  	 * @return
  	 */
  	@RequestMapping(value="/operation/delete",method=RequestMethod.POST)
	public ModelAndView toDelete${tableInfo.entityBean.standName}DTO(@RequestBody String[] ids,HttpServletRequest request){
		ModelAndView mav= new ModelAndView();
		try {
  			LogBase logBase = LogBaseFactory.getLogBase(sessionHelper, request);
			service.delete${tableInfo.entityBean.standName}ByIds(ids,logBase);
			mav.addObject("flag", OpResult.success);
		} catch (Exception ex) {
			logger.debug(ex.getMessage());
			mav.addObject("error", ex.getMessage());
			mav.addObject("flag", OpResult.failure);
			return mav;
		}
		return mav;
	}  	
 
}